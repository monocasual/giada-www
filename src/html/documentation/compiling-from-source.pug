extends ../base

block metas-vars
	- var title       = 'Docs - Compiling from source - '
	- var description = ', documentation, Compiling from source'
	- var keywords    = ', documentation, Compiling from source'

block content
	.container
		#documentation.row
			.col-md-9
				h1 Compiling from source

				p.
					Giada source code is hosted and mantained on #[a(href='https://github.com/monocasual/giada') GitHub]. It requires a C++17-compatible compiler and #[a(href='https://cmake.org/') CMake] already installed. This document is about setting up Giada #[em from the command line], but you can also configure and build it directly in your IDE. 

				h2 Grab the code

				p.
					First of all clone the remote repository on your machine:

				p.code.
					git clone git@github.com:monocasual/giada.git
				
				p.
					a new folder #[span.code giada] will be created. Go inside and initialize the submodules (i.e. the dependencies):
				
				pre.code.
					git submodule update --init --recursive

				h2 Configure and build

				p.
					Create a build directory inside the #[span.code giada] folder and go in there:

				pre.code.
					cd giada
					mkdir build
					cd build

				p.
					Now invoke CMake:

				pre.code.
					cmake ..

				p.
					CMake will generate the proper project according to your environment: Makefile on Linux, Visual Studio solution on Windows, XCode project on macOS. When the script is done without errors, open the generated project with your IDE or run the makefile from the command line to compile Giada. 

				h2 Dependencies

				p.
					Most of the dependencies are included as git submodules. However, Giada currently requires some external libraries to be installed on your system. Namely: 
				ul
					li
						p FLTK — 1.3.[0 or greater];
					li 
						p Libsndfile — 1.0.28 or greater;
					li 
						p Libsamplerate — 0.1.9 or greater;
					li 
						p RtMidi — 3.0.0 or greater;

				h3 Additional configuration parameters

				p.
					You can pass several parameters to CMake during the configuration stage as #[span.code -D&lt;parameter&gt;=&lt;value&gt;]. For example: 
					
				p.code.
					cmake -DPARAMETER1=VALUE1 -DPARAMETER2=VALUE2 ..
				
				p.
					Available parameters:
				
				ul
					li
						p #[span.code CMAKE_BUILD_TYPE] — define the build type. Possible values: #[span.code Debug], #[span.code Release];

						p #[span.code WITH_VST2] — enable support for VST2 plug-ins. Disabled by default and requires the now deprecated VST2.x SDK by Steinberg. Possible values: #[span.code ON], #[span.code OFF];
					li
						p #[span.code WITH_VST3] — enable support for VST3 plug-ins. Disabled by default. Possible values: #[span.code ON], #[span.code OFF];
					li
						p #[span.code WITH_TESTS] — include the test suite. Disabled by default. Possible values: #[span.code ON], #[span.code OFF];
					li
						p #[span.code WITH_SYSTEM_CATCH] — by default Giada includes Catch as a git submodule. Pass this flag to use the system provided one instead (useful in most Linux distributions). Possible values: #[span.code ON], #[span.code OFF];

				h2 Run the tests (optional)

				p.
					All unit tests in Giada are based on #[a(href='https://github.com/philsquared/Catch/') Catch automated test framework], which supports several command-line options. Please take a look at the #[a(href='https://github.com/philsquared/Catch/blob/master/docs/command-line.md') official documentation] to understand the gritty details. Giada must be configured with #[span.code -DWITH_TESTS=ON] first, while tests are run as following:
				
				p.code.
					./giada --run-tests [optional catch parameters]
	
			#side-menu.col-md-3.margin-top-xl
				include side-menu
