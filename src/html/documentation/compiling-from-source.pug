extends ../base

block metas-vars
	- var title       = 'Docs - Compiling from source - '
	- var description = ', documentation, Compiling from source'
	- var keywords    = ', documentation, Compiling from source'

block content
	.container
		#documentation.row
			.col-md-9
				h1 Compiling from source

				p.
					Giada source code is hosted and mantained on #[a(href='https://github.com/monocasual/giada') GitHub] and requires a C++14-compatible compiler. If you're new to GitHub, we recommend a very nice #[a(href='http://net.tutsplus.com/tutorials/other/getting-the-hang-of-github/') tutorial] for beginners.

				h2 Grab the code

				p.
					First of all clone the remote repository on your machine:

				p.code.
					git clone git@github.com:monocasual/giada.git
				
				p.
					a new folder #[span.code giada] will be created. Go inside and initialize the submodules (i.e. the dependencies):
				
				pre.code.
					git submodule init  
					git submodule update --recursive
				
				p.
					Finally, run the included #[span.code autogen.sh] script in order to prepare the build environment.

				h2 Configure and build

				p.
					The configure script inside the package, designed for Unix systems and MinGW (Windows) will help you to guess correct values for various system-dependent variables used during compilation. You have to pass it the #[span.code --target] parameter depending on your operating system:

				p.code.
					./configure --target=[linux | osx | windows]

				p.
					e.g. if you want to compile for Linux, do:

				p.code.
					./configure --target=linux

				p.
					When the script is done without errors, do:

				p.code.
					make

				p.
					to compile everything. If you wish to install Giada on Linux, become root and type

				p.code.
					make install

				p.
					to copy the binary file into /usr/local/bin path. 

				h2 Dependencies

				p.
					Most of the dependencies are included as git submodules. However, Giada currently requires some external libraries to be installed on your system. Namely: 
				ul
					li
						p FLTK — 1.3.[0 or greater];
					li 
						p Libsndfile — 1.0.28 or greater;
					li 
						p Libsamplerate — 0.1.9 or greater;
					li 
						p RtMidi — 3.0.0 or greater;

				h3 Additional flags

				ul
					li
						p #[span.code --enable-vst] — enable support for VST plug-ins. Disabled by default;
					li
						p #[span.code --enable-debug] — enable debug mode (mainly asserts). Disabled by default;
					li
						p #[span.code --enable-system-catch] — by default Giada includes Catch from the local source folder. Pass this flag to use the system provided one instead (useful in most Linux distributions);

				h2 Run the tests (optional)

				p.
					All unit tests in Giada are based on #[a(href='https://github.com/philsquared/Catch/') Catch automated test framework], which supports several command-line options. Please take a look at the #[a(href='https://github.com/philsquared/Catch/blob/master/docs/command-line.md') official documentation] to understand the gritty details. The command below will just run the entire test suite:
				
				p.code.
					make check
	
			#side-menu.col-md-3.margin-top-xl
				include side-menu